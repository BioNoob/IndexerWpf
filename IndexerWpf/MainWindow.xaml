<Window x:Class="IndexerWpf.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:cm="clr-namespace:System.ComponentModel;assembly=System"
        	xmlns:Controls="clr-namespace:System.Windows.Controls;assembly=MultiSelectTreeView" 
        mc:Ignorable="d"
        xmlns:local="clr-namespace:IndexerWpf.Models"
        xmlns:bas="clr-namespace:IndexerWpf"
        xmlns:local_cls="clr-namespace:IndexerWpf.Classes"
        Title="MainWindow"  
        WindowStyle="None"
        WindowState="Normal" 
        ResizeMode="CanResize"
        AllowsTransparency="True"  Background="Transparent"
        MinHeight="350" MinWidth="550"
        Name="Window"
        Height="{Binding Sets.WindowSise.X, Mode=TwoWay}" Width="{Binding Sets.WindowSise.Y, Mode=TwoWay}"
        Top="{Binding Sets.WindowLastPos.Y, Mode=TwoWay}" Left="{Binding Sets.WindowLastPos.X, Mode=TwoWay}">
    <Window.DataContext>
        <local:MainViewModel/>
    </Window.DataContext>
    <Window.Resources>
        <Style x:Key="MenuSeparatorStyle" TargetType="{x:Type Separator}">
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="OverridesDefaultStyle" Value="True"/>
            <Setter Property="IsTabStop" Value="False"/>
            <Setter Property="KeyboardNavigation.IsTabStop" Value="False"/>
            <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
            <Setter Property="Height" Value="5"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Separator}">
                        <Border Height="2" Margin="2" VerticalAlignment="Center" Background="#FF808080"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="{x:Type Button}" x:Key="ImgButton" BasedOn="{StaticResource DefaultStyle}">
            <Setter Property="Background" Value="#FF3F3F3F" />
            <Setter Property="BorderBrush" Value="#FF3F3F3F" />
            <Setter Property="Foreground" Value="White" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#50FFFFFF"/>
                </Trigger>
            </Style.Triggers>

        </Style>
        <Style TargetType="TextBlock" BasedOn="{StaticResource DefaultStyle}"/>
        <Style TargetType="MenuItem">
            <Setter Property="Width" Value="200"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type MenuItem}">
                        <Grid Name="Root" Height="Auto" >
                            <ContentPresenter Name="HeaderHost" Margin="10,2,0,2" ContentSource="Header" RecognizesAccessKey="True" HorizontalAlignment="Left" VerticalAlignment="Center"
                      TextOptions.TextRenderingMode="ClearType" TextBlock.FontSize="12" TextBlock.Foreground="{TemplateBinding Foreground}" TextOptions.TextFormattingMode="Display">
                                <ContentPresenter.Resources>
                                    <Style TargetType="{x:Type TextBlock}">
                                        <Setter Property="TextTrimming" Value="CharacterEllipsis"/>
                                    </Style>
                                </ContentPresenter.Resources>
                            </ContentPresenter>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="Root" Property="Background" Value="#505050"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter TargetName="Root" Property="Background" Value="#808080"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Foreground" Value="#808080"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style TargetType="{x:Type ContextMenu}">
            <Setter Property="Background" Value="#FF3F3F3F"/>
            <Setter Property="Foreground" Value="White" />
            <Setter Property="Opacity" Value="0.95"/>
            <Setter Property="SnapsToDevicePixels" Value="True" />
            <Setter Property="OverridesDefaultStyle" Value="True" />
            <Setter Property="Grid.IsSharedSizeScope" Value="true" />
            <Setter Property="HasDropShadow" Value="True" />
            <Setter Property="Width" Value="180"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ContextMenu}">
                        <Grid Background="Transparent">
                            <Border Margin="0,0,5,5" Background="#FF3F3F3F" BorderThickness="2" BorderBrush="Black" CornerRadius="5">
                                <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" Margin="5"/>
                                <Border.Effect>
                                    <DropShadowEffect BlurRadius="3" ShadowDepth="3" Color="Black" Opacity="0.5"/>
                                </Border.Effect>
                            </Border>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="TextBox" BasedOn="{StaticResource DefaultStyle}"/>
        <Style TargetType="ListView" BasedOn="{StaticResource DefaultStyle}"/>
        <Style TargetType="TreeView" BasedOn="{StaticResource DefaultStyle}"/>
        <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition Width="20" />
                </Grid.ColumnDefinitions>
                <Border
                  x:Name="Border" 
                  Grid.ColumnSpan="2"
                  CornerRadius="0"
                  Background="#FF3F3F3F"
                  BorderBrush="#FF97A0A5"
                  BorderThickness="1" >

                </Border>
                <Border 
                  Grid.Column="0"
                  CornerRadius="0" 
                  Margin="1" 
                  Background="#FF3F3F3F" 
                  BorderBrush="#FF97A0A5"
                  BorderThickness="0,0,1,0" />
                <Path Margin="-2,0,0,0"
                  x:Name="Arrow"
                  Grid.Column="1"     
                  Fill="White"
                  HorizontalAlignment="Center"
                  VerticalAlignment="Center"
                  Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z"
                />
            </Grid>
            <!--<ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsMouseOver" Value="true">
                <Setter TargetName="Border" Property="Background" Value="#808080" />
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="true">
                <Setter TargetName="Border" Property="Background" Value="#E0E0E0" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="Border" Property="Background" Value="#EEEEEE" />
                <Setter TargetName="Border" Property="BorderBrush" Value="#AAAAAA" />
                <Setter Property="Foreground" Value="#888888"/>
                <Setter TargetName="Arrow" Property="Fill" Value="#888888" />
            </Trigger>
        </ControlTemplate.Triggers>-->
        </ControlTemplate>
        <ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
            <Border x:Name="PART_ContentHost" Focusable="False" Background="{TemplateBinding Background}" />
        </ControlTemplate>
        <Style x:Key="{x:Type ComboBox}" TargetType="{x:Type ComboBox}">
            <Setter Property="FontFamily" Value="Jura"/>
            <Setter Property="SnapsToDevicePixels" Value="true"/>
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
            <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
            <Setter Property="MinWidth" Value="30"/>
            <Setter Property="MinHeight" Value="20"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ComboBox}">
                        <Grid>
                            <ToggleButton 
                            Name="ToggleButton" 
                            Template="{StaticResource ComboBoxToggleButton}" 
                            Grid.Column="2" 
                            Focusable="false"
                            IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                            ClickMode="Press">
                            </ToggleButton>
                            <ContentPresenter Name="ContentSite" IsHitTestVisible="False"  Content="{TemplateBinding SelectionBoxItem}"
                            ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                            ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                            Margin="10,0,23,3"
                            VerticalAlignment="Center"
                            HorizontalAlignment="Left" />
                            <TextBox x:Name="PART_EditableTextBox"
                            Style="{x:Null}" 
                            Template="{StaticResource ComboBoxTextBox}" 
                            HorizontalAlignment="Left" 
                            VerticalAlignment="Center" 
                            Margin="10,3,23,3"
                            Focusable="True" 
                            Background="#FF3F3F3F"
                            Foreground="Green"
                            Visibility="Hidden"
                            IsReadOnly="{TemplateBinding IsReadOnly}"/>
                            <Popup 
                            Name="Popup"
                            Placement="Bottom"
                            IsOpen="{TemplateBinding IsDropDownOpen}"
                            AllowsTransparency="True" 
                            Focusable="False"
                            PopupAnimation="Slide">
                                <Grid Name="DropDown"
                              SnapsToDevicePixels="True"                
                              MinWidth="{TemplateBinding ActualWidth}"
                              MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                    <Border 
                                        x:Name="DropDownBorder"
                                        Background="#FF3F3F3F"
                                        BorderThickness="1"
                                        BorderBrush="#888888"/>
                                    <ScrollViewer Margin="6,6,3,3" SnapsToDevicePixels="True" CanContentScroll="True">
                                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                    </ScrollViewer>
                                </Grid>
                            </Popup>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="HasItems" Value="false">
                                <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="#888888"/>
                            </Trigger>
                            <Trigger Property="IsGrouping" Value="true">
                                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                            </Trigger>
                            <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
                                <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="0"/>
                                <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0"/>
                            </Trigger>
                            <Trigger Property="IsEditable"  Value="true">
                                <Setter Property="IsTabStop" Value="false"/>
                                <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible"/>
                                <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="ItemContainerStyle">
                <Setter.Value>
                    <Style TargetType="ComboBoxItem">
                        <Setter Property="HorizontalContentAlignment" Value="Left" />
                        <Setter Property="VerticalContentAlignment" Value="Center" />
                    </Style>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
            </Style.Triggers>
        </Style>
        <Style x:Key="{x:Type ComboBoxItem}" TargetType="{x:Type ComboBoxItem}">
            <Setter Property="SnapsToDevicePixels" Value="true"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                        <Border Name="Border"
                              Padding="2"
                              SnapsToDevicePixels="true">
                            <ContentPresenter />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsHighlighted" Value="true">
                                <Setter TargetName="Border" Property="Background" Value="#FF4F4F4F"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="#888888"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

    </Window.Resources>
    <WindowChrome.WindowChrome>
        <WindowChrome 
        CaptionHeight="0"
        ResizeBorderThickness="10" />
    </WindowChrome.WindowChrome>
    <Border CornerRadius="10" BorderBrush="#FF3F3F3F" Background="#FF3F3F3F" BorderThickness="5" Padding="0">
        <Grid Margin="0,0,0,0">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition/>
            </Grid.ColumnDefinitions>
            <Grid Grid.Row="0" Margin="10,5,10,0">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <Button Margin="0,0,10,0" Grid.Column="0" ClipToBounds="True"  HorizontalAlignment="Stretch" Width="25" Command="{Binding OpenIndexFolderCommand}" Style="{StaticResource ImgButton}"
                        ToolTip="Show indexes folder">
                    <Image Source="Resources/папка_настрйока.png"/>
                    <Button.ContextMenu>
                        <ContextMenu>
                            <MenuItem Header="Change default folder" Command="{Binding ChangeDirCommand}"/>
                            <Separator Style="{StaticResource MenuSeparatorStyle}"/>
                            <MenuItem IsEnabled="False" Header="{Binding Def_path}" ToolTip="{Binding Def_path}" ToolTipService.ShowOnDisabled="True"/>
                        </ContextMenu>
                    </Button.ContextMenu>
                </Button>
                <Label Content="Avalibale indexes" HorizontalAlignment="Stretch" Grid.Column="1"/>

                <!--<ComboBox HorizontalAlignment="Stretch" Margin="10,0,10,0" ItemsSource="{Binding ExistedIndexes}" SelectedItem="{Binding SelectedExisted}" IsEnabled="{Binding Is_scanned}"
                      Grid.Column="2" VerticalContentAlignment="Center"> Width="{Binding ActualWidth, ElementName=Sats}"  Width="{Binding ActualWidth, RelativeSource={RelativeSource TemplatedParent}}"
                </ComboBox>-->
                <Border  x:Name="Sats" Margin="10,0,10,0" HorizontalAlignment="Stretch" Grid.Column="2" Background="Transparent" BorderThickness="0" Padding="0"> 
                    <!--<Grid Margin="0">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="20"/>
                        </Grid.ColumnDefinitions>
                        <Path Fill="White" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z" Grid.Column="1"/>
                        <TextBox VerticalContentAlignment="Center" HorizontalAlignment="Stretch"  Foreground="White" Background="Transparent" 
                                                     Padding="0" Margin="0"  IsReadOnly="True" Text="{Binding SelectedExisted, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Grid.Column="0" BorderThickness="0,0,1,0"/>
                        <Popup IsOpen="True" Placement="Bottom" AllowsTransparency="True" Focusable="False" PopupAnimation="Slide" VerticalOffset="5" Width="{Binding ActualWidth, ElementName=Sats}">
                            <bas:SelectIndxElementsWindow Padding="0" Margin="0">

                            </bas:SelectIndxElementsWindow>
                        </Popup>
                    </Grid>-->
                    <ToggleButton ClipToBounds="True" IsEnabled="{Binding Is_scanned}" Focusable="false" IsChecked="False" x:Name="Toggle" >
                        <ToggleButton.Template>
                            <ControlTemplate TargetType="{x:Type ToggleButton}">
                                <Border CornerRadius="0" Background="#FF3F3F3F" Padding="0" Margin="0"
                                                BorderBrush="#FF97A0A5" BorderThickness="1,1,1.5,1" >
                                    <Grid >
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="*"/>
                                            <ColumnDefinition Width="20"/>
                                        </Grid.ColumnDefinitions>
                                        <Path Fill="White" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z" Grid.Column="1"/>
                                        <TextBox VerticalContentAlignment="Center" HorizontalAlignment="Stretch"  Foreground="White" Background="Transparent"
                                                 Padding="0" Margin="5,0,0,0"  IsReadOnly="True" Text="{Binding SelectedIndexsString, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                                 Grid.Column="0" BorderThickness="0,0,1,0" PreviewMouseDown="TextBox_PreviewMouseDown" />
                                        <Popup IsOpen="{TemplateBinding IsChecked}" Placement="Bottom" AllowsTransparency="True" StaysOpen="False" Closed="Popup_Closed"
                                               Focusable="False" PopupAnimation="Slide" VerticalOffset="5" Width="{TemplateBinding ActualWidth}">
                                            <Border  CornerRadius="0" BorderBrush="#FF97A0A5" Background="#FF3F3F3F" BorderThickness="1" Padding="0">
                                                <ListView ItemsSource="{Binding ListOfIndexes, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                                          Margin="2.5" ScrollViewer.VerticalScrollBarVisibility="Visible" Background="Transparent" BorderThickness="0">
                                                    <ListView.ItemTemplate>
                                                        <DataTemplate DataType="{x:Type local_cls:IndxElements}">
                                                            <CheckBox IsChecked="{Binding IsSelected}" Content="{Binding GetName}" Foreground="White" HorizontalContentAlignment="Center" VerticalContentAlignment="Center"/>
                                                        </DataTemplate>
                                                    </ListView.ItemTemplate>
                                                </ListView>
                                            </Border>
                                        </Popup>
                                    </Grid>
                                </Border>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsEnabled" Value="false">
                                        <Setter Property="Foreground" Value="#888888"/>
                                    </Trigger>
                                    <!--<Trigger Property="ToggleButton.LostFocus" Value="false">
                                        <Setter Property="IsChecked" Value="false"/>
                                    </Trigger>-->
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </ToggleButton.Template>
                    </ToggleButton>
                </Border>



                <!--<Label Content="Index date" HorizontalAlignment="Stretch" Grid.Column="3" Margin="0,0,5,0"/>
                <TextBox Text="{Binding Indexes.DateOfLastChange}" VerticalContentAlignment="Center" HorizontalContentAlignment="Center" 
                     HorizontalAlignment="Right" Width="135" IsReadOnly="True" Grid.Column="4"/>-->
                <Button Margin="10,0,0,0" Grid.Column="5" ClipToBounds="True"  HorizontalAlignment="Stretch" Width="25" Command="{Binding CloseWindowCommand}" Style="{StaticResource ImgButton}">
                    <Image Source="Resources/закрыть.png"/>
                </Button>
                <Border Grid.Row="1" BorderThickness="0,1" Grid.ColumnSpan="6" BorderBrush="White" HorizontalAlignment="Stretch" Padding="0" 
                    ClipToBounds="True" Height="1" Margin="0,5,0,0" />

            </Grid>
            <Grid Grid.Row="1" Margin="10,5,10,0">
                <Grid.RowDefinitions>
                    <RowDefinition Height="25"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="1*"/>
                    <ColumnDefinition Width="32"/>
                    <ColumnDefinition Width="0.75*"/>
                    <ColumnDefinition Width="0.25*"/>
                </Grid.ColumnDefinitions>
                <Controls:MultiSelectTreeView x:Name="folder_tree" Grid.RowSpan="3" Grid.Column="0" GotFocus="folder_tree_GotFocus"
                 ItemsSource="{Binding VisualFolder, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                 SelectedItems="{Binding SelectedElements, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                 HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="0" ScrollViewer.HorizontalScrollBarVisibility="Auto" 
                 SelectionChanged="folder_tree_SelectionChanged" FontFamily="Jura">
                    <Controls:MultiSelectTreeView.ItemContainerStyle>
                        <Style TargetType="{x:Type Controls:MultiSelectTreeViewItem}">
                            <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}" />
                            <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
                            <!--<EventSetter Event="Selected" Handler="TreeViewSelectedItemChanged" />-->
                            <!-- https://github.com/ygoe/MultiSelectTreeView -->
                        </Style>
                    </Controls:MultiSelectTreeView.ItemContainerStyle>
                    <Controls:MultiSelectTreeView.Resources>
                        <HierarchicalDataTemplate DataType="{x:Type local_cls:IndxElement}" ItemsSource="{Binding Items}">
                            <StackPanel Orientation="Horizontal">
                                <Image x:Name="treeImg"  Width="16" Height="16" Source="{Binding GetUriImg}" />
                                <TextBlock Text="{Binding Name}" TextWrapping="Wrap" TextTrimming="WordEllipsis" Margin="5,0,0,0">
                                    <TextBlock.ToolTip>
                                        <TextBlock Text="{Binding ParentName}" FontFamily="Jura"/>
                                    </TextBlock.ToolTip>
                                <TextBlock.ContextMenu>
                                    <ContextMenu>
                                        <MenuItem Header="Open document" Command="{Binding OpenFileCommand}"/>
                                            <Separator Style="{StaticResource MenuSeparatorStyle}"/>
                                        <MenuItem Header="Open document folder" Command="{Binding OpenFolderCommand}"/>
                                        <Separator Style="{StaticResource MenuSeparatorStyle}"/>
                                            <MenuItem Header="Copy Selected Files" Command="{Binding Path=DataContext.SaveFilesCommand, Source={x:Reference Name=Window}}" StaysOpenOnClick="True"/>
                                            <Border Width="auto" BorderBrush="#7F888888" BorderThickness="1.5" Background="Transparent" CornerRadius="5" Padding="5">
                                                <TextBlock VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Text="TUT TEXT TOGO CHTO SCOPIROVANNO" Foreground="White"
                                                           TextWrapping="WrapWithOverflow" />
                                                <Border.Style>
                                                    <Style TargetType="Border">
                                                        <Style.Triggers>
                                                            <DataTrigger Binding="{Binding Path=DataContext.ShowPopUp, Source={x:Reference Name=Window}}" Value="false">
                                                                <Setter Property="Visibility" Value="Collapsed"/>
                                                            </DataTrigger>
                                                            <DataTrigger Binding="{Binding Path=DataContext.ShowPopUp, Source={x:Reference Name=Window}}" Value="true">
                                                                <Setter Property="Visibility" Value="Visible"/>
                                                            </DataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </Border.Style>
                                            </Border>
                                    </ContextMenu>
                                </TextBlock.ContextMenu>
                            </TextBlock>
                            </StackPanel>

                        </HierarchicalDataTemplate>
                    </Controls:MultiSelectTreeView.Resources>
                </Controls:MultiSelectTreeView>
                <Image Source="Resources/поиск.png" Width="24" Height="24" Grid.Column="1" VerticalAlignment="Center" HorizontalAlignment="Center" Margin="10,0,0,0" />
                <TextBox Grid.Row="0" Grid.Column="2" Margin="10,0,0,0" Text="{Binding Search_text, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                     HorizontalContentAlignment="Left" VerticalContentAlignment="Center" IsEnabled="{Binding Was_Loaded}"/>
                <TextBlock Grid.Row="1" Grid.Column="2" Margin="0,2,0,0" FontSize="10" VerticalAlignment="Center" HorizontalAlignment="Center"
                           >
                    <Hyperlink NavigateUri="https://regex101.com/" RequestNavigate="Hyperlink_RequestNavigate" >
                        RegEx supported
                    </Hyperlink>
                </TextBlock>
                <ComboBox Grid.Row="0" Grid.Column="3" Margin="10,0,0,0" ItemsSource="{Binding ListOfExtentionsSelectedIndexes, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"  SelectedValue="{Binding SelectedFilter}" IsEnabled="{Binding Was_Loaded}"/>
                <ListView Grid.Row="2" Grid.Column="1" Grid.ColumnSpan="3" Margin="10,2,0,0" ItemsSource="{Binding Searched}" SelectionChanged="ListView_SelectionChanged" SelectionMode="Extended"
                          x:Name="SearchResult" GotFocus="SearchResult_GotFocus">
                    <ListView.ItemContainerStyle>
                        <Style TargetType="{x:Type ListViewItem}">
                            <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                        </Style>
                    </ListView.ItemContainerStyle>
                    <ListView.ItemTemplate>
                        <DataTemplate DataType="{x:Type local_cls:IndxElement}">
                            <StackPanel Orientation="Horizontal" VerticalAlignment="Stretch">
                                <Image Source="{Binding GetUriImg}" HorizontalAlignment="Center" VerticalAlignment="Top" Margin="0,0,5,0"/>
                                <TextBlock Text="{Binding Name}" HorizontalAlignment="Center" VerticalAlignment="Bottom">
                                    <TextBlock.ContextMenu>
                                        <ContextMenu>
                                            <MenuItem Header="Open document" Command="{Binding OpenFileCommand}"/>
                                            <Separator Style="{StaticResource MenuSeparatorStyle}"/>
                                            <MenuItem Header="Open document folder" Command="{Binding OpenFolderCommand}"/>
                                            <Separator Style="{StaticResource MenuSeparatorStyle}"/>
                                            <MenuItem Header="Copy Selected Files" Command="{Binding Path=DataContext.SaveFilesCommand, Source={x:Reference Name=Window}}" StaysOpenOnClick="True"/>
                                            <Border Width="auto" BorderBrush="#7F888888" BorderThickness="1.5" Background="Transparent" CornerRadius="5" Padding="5">
                                                <TextBlock VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Text="TUT TEXT TOGO CHTO SCOPIROVANNO" Foreground="White"
                                                           TextWrapping="WrapWithOverflow" />
                                                <Border.Style>
                                                    <Style TargetType="Border">
                                                        <Style.Triggers>
                                                            <DataTrigger Binding="{Binding Path=DataContext.ShowPopUp, Source={x:Reference Name=Window}}" Value="false">
                                                                <Setter Property="Visibility" Value="Collapsed"/>
                                                            </DataTrigger>
                                                            <DataTrigger Binding="{Binding Path=DataContext.ShowPopUp, Source={x:Reference Name=Window}}" Value="true">
                                                                <Setter Property="Visibility" Value="Visible"/>
                                                            </DataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </Border.Style>
                                            </Border>

                                        </ContextMenu>
                                    </TextBlock.ContextMenu>
                                </TextBlock>
                                <StackPanel.ToolTip>
                                    <TextBlock Text="{Binding FullPath}" FontFamily="Jura"/>
                                </StackPanel.ToolTip>
                            </StackPanel>
                        </DataTemplate>
                    </ListView.ItemTemplate>
                </ListView>
                <!--<indexerwpf:MultiCombo Height="500" Grid.RowSpan="2"/>-->
            </Grid>
            <Grid Grid.Row="2" Margin="10,5,10,5">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <Label HorizontalAlignment="Left" Content="Files count" Grid.Column="0"/>
                <TextBox Margin="5,0,5,0" Text="{Binding Prog_value}" VerticalContentAlignment="Center" HorizontalContentAlignment="Center" Grid.Column="1" HorizontalAlignment="Left" Width="60" IsReadOnly="True"/>
                <!--<ProgressBar ClipToBounds="True" HorizontalAlignment="Stretch" Grid.Column="2" Margin="5,0,10,0" Maximum="{Binding Prog_value_max}" Value="{Binding Prog_value}">
                    <ProgressBar.Foreground>
                        <LinearGradientBrush EndPoint="0,0.5" StartPoint="1,0.5">
                            <GradientStop Color="#FF4990FB" Offset="0"/>
                            <GradientStop Color="#FF124BA1" Offset="1"/>
                        </LinearGradientBrush>
                    </ProgressBar.Foreground>

                </ProgressBar>-->
                <Button HorizontalAlignment="Right" Width="65" Content="Scan" Grid.Column="3" Command="{Binding StartScanCommand}" IsEnabled="{Binding Is_scanned}"
                                   BorderBrush="White" Background="White" Foreground="Black" FontFamily="Jura"/>
            </Grid>

            <Border Background="#7F3F3F3F" Grid.ColumnSpan="2" Grid.RowSpan="3" ClipToBounds="True" CornerRadius="10" x:Name="borderspinner" Visibility="Collapsed" Opacity="100">
                <Grid Grid.RowSpan="3" VerticalAlignment="Center" HorizontalAlignment="Center">
                    <Border BorderBrush="Transparent" Width="153" Height="153" VerticalAlignment="Center" HorizontalAlignment="Center" CornerRadius="100" Padding="0">
                        <Border.Background>
                            <RadialGradientBrush>
                                <GradientStop Color="#7F73FD38"/>
                                <GradientStop Color="White" Offset="2"/>
                            </RadialGradientBrush>
                        </Border.Background>
                    </Border>
                    <Grid>
                        <Image Height="150" Width="150" HorizontalAlignment="Center" VerticalAlignment="Center"  Stretch="Fill" Source="Resources/frag_o.png" RenderTransformOrigin=".5,.5">
                            <Image.RenderTransform>
                                <RotateTransform x:Name="noFreeze2" />
                            </Image.RenderTransform>
                            <Image.Triggers>
                                <EventTrigger RoutedEvent="Loaded">
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation
                        Storyboard.TargetProperty="(Image.RenderTransform).(RotateTransform.Angle)"
                        To="360" Duration="0:0:1" RepeatBehavior="Forever" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger>
                            </Image.Triggers>
                        </Image>
                        <Image Height="150" Width="150" HorizontalAlignment="Center" VerticalAlignment="Center"  Stretch="Fill" Source="Resources/frag_b.png" RenderTransformOrigin=".5,.5">
                            <Image.RenderTransform>
                                <RotateTransform x:Name="noFreeze" />
                            </Image.RenderTransform>
                            <Image.Triggers>
                                <EventTrigger RoutedEvent="Loaded">
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation
                        Storyboard.TargetProperty="(Image.RenderTransform).(RotateTransform.Angle)"
                        To="360" Duration="0:0:2.5" RepeatBehavior="Forever" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger>
                            </Image.Triggers>
                        </Image>
                        <Image Height="150" Width="150" HorizontalAlignment="Center" VerticalAlignment="Center"  Stretch="Fill" Source="Resources/frag_c.png" RenderTransformOrigin=".5,.5">
                            <Image.RenderTransform>
                                <RotateTransform x:Name="noFreeze1" />
                            </Image.RenderTransform>
                            <Image.Triggers>
                                <EventTrigger RoutedEvent="Loaded">
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation
                        Storyboard.TargetProperty="(Image.RenderTransform).(RotateTransform.Angle)"
                        To="360" Duration="0:0:1.5" RepeatBehavior="Forever" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger>
                            </Image.Triggers>
                        </Image>
                        <Image Height="150" Width="150" HorizontalAlignment="Center" VerticalAlignment="Center"  Stretch="Fill" Source="Resources/frag_y.png" RenderTransformOrigin=".5,.5">
                            <Image.RenderTransform>
                                <RotateTransform x:Name="noFreeze3"/>
                            </Image.RenderTransform>
                            <Image.Triggers>
                                <EventTrigger RoutedEvent="Loaded">
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation
                        Storyboard.TargetProperty="(Image.RenderTransform).(RotateTransform.Angle)"
                        To="360" Duration="0:0:2" RepeatBehavior="Forever" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger>
                            </Image.Triggers>
                        </Image>
                    </Grid>
                    <Border BorderBrush="Black" Width="153" Height="153" VerticalAlignment="Center" HorizontalAlignment="Center" BorderThickness="3" CornerRadius="100" Padding="0"/>
                </Grid>
                <!--<Border.Style>
                    <Style TargetType="Border">
                        <Setter Property="Opacity" Value="100"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Is_scanned}" Value="false">
    
                                <DataTrigger.EnterActions>
                                    <BeginStoryboard Storyboard="{StaticResource VsetToOne}"/>
                                </DataTrigger.EnterActions>
                                 
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Is_scanned}" Value="true">
                                <DataTrigger.EnterActions>
                                    <BeginStoryboard Storyboard="{StaticResource VsetToZero}"/>
                                </DataTrigger.EnterActions>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Border.Style>-->
            </Border>
        </Grid>
    </Border>

</Window>
